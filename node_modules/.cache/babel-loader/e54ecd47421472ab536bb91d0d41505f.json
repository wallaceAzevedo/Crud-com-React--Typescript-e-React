{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nexport const useMutation = (path, callback) => {\n  _s();\n\n  const [processing, setProcesing] = useState(false);\n  const [success, setSuccess] = useState();\n  const [error, setError] = useState();\n  const url = `${process.env.REACT_APP_API}/${path}`;\n\n  const wrap = fn => {\n    return async record => {\n      setProcesing(true);\n      setSuccess(undefined);\n      setError(undefined);\n      fn(record).then(() => {\n        setSuccess(true);\n\n        if (callback) {\n          callback();\n        }\n      }).catch(error => {\n        setSuccess(false);\n        setError(error);\n      }).finally(() => {\n        setProcesing(false);\n      });\n    };\n  };\n\n  const create = wrap(async record => {\n    await axios.post(url, record);\n  });\n  const update = wrap(async record => {\n    await axios.put(`${url}/${record.id}`, record);\n  });\n  const remove = wrap(async record => {\n    await axios.delete(`${url}/${record.id}`);\n  });\n  return {\n    create,\n    update,\n    remove,\n    processing,\n    success,\n    error,\n    setError\n  };\n};\n\n_s(useMutation, \"JCIngl8SvIREMvFh60T/gOrqFMQ=\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Crud-com-React--Typescript-e-React/src/hooks/useMutation.ts"],"names":["useState","axios","useMutation","path","callback","processing","setProcesing","success","setSuccess","error","setError","url","process","env","REACT_APP_API","wrap","fn","record","undefined","then","catch","finally","create","post","update","put","id","remove","delete"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkC,OAAlC;AAKA,OAAO,MAAMC,WAAW,GAAG,CACzBC,IADyB,EAEzBC,QAFyB,KAGtB;AAAA;;AACH,QAAM,CAACC,UAAD,EAAaC,YAAb,IAA6BN,QAAQ,CAAU,KAAV,CAA3C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AAEA,QAAMW,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,IAAGX,IAAK,EAAjD;;AAEA,QAAMY,IAAI,GAAIC,EAAD,IAAmB;AAC9B,WAAO,MAAOC,MAAP,IAAqB;AAC1BX,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,MAAAA,UAAU,CAACU,SAAD,CAAV;AACAR,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACAF,MAAAA,EAAE,CAACC,MAAD,CAAF,CACGE,IADH,CACQ,MAAM;AACVX,QAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,YAAIJ,QAAJ,EAAc;AACZA,UAAAA,QAAQ;AACT;AACF,OANH,EAOGgB,KAPH,CAOUX,KAAD,IAAkB;AACvBD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,OAVH,EAWGY,OAXH,CAWW,MAAM;AACbf,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAbH;AAcD,KAlBD;AAmBD,GApBD;;AAsBA,QAAMgB,MAAiB,GAAGP,IAAI,CAAC,MAAOE,MAAP,IAAqB;AAClD,UAAMhB,KAAK,CAACsB,IAAN,CAAWZ,GAAX,EAAgBM,MAAhB,CAAN;AACD,GAF6B,CAA9B;AAIA,QAAMO,MAAiB,GAAGT,IAAI,CAAC,MAAOE,MAAP,IAAqB;AAClD,UAAMhB,KAAK,CAACwB,GAAN,CAAW,GAAEd,GAAI,IAAGM,MAAM,CAACS,EAAG,EAA9B,EAAiCT,MAAjC,CAAN;AACD,GAF6B,CAA9B;AAIA,QAAMU,MAAiB,GAAGZ,IAAI,CAAC,MAAOE,MAAP,IAAqB;AAClD,UAAMhB,KAAK,CAAC2B,MAAN,CAAc,GAAEjB,GAAI,IAAGM,MAAM,CAACS,EAAG,EAAjC,CAAN;AACD,GAF6B,CAA9B;AAIA,SAAO;AACLJ,IAAAA,MADK;AAELE,IAAAA,MAFK;AAGLG,IAAAA,MAHK;AAILtB,IAAAA,UAJK;AAKLE,IAAAA,OALK;AAMLE,IAAAA,KANK;AAOLC,IAAAA;AAPK,GAAP;AASD,CArDM;;GAAMR,W","sourcesContent":["import { useState } from 'react';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { Record } from '../interfaces/RecordEntities';\r\n\r\nexport type Action<T> = (record: T) => Promise<void>;\r\n\r\nexport const useMutation = <T extends Record>(\r\n  path: string,\r\n  callback?: Function\r\n) => {\r\n  const [processing, setProcesing] = useState<boolean>(false);\r\n  const [success, setSuccess] = useState<boolean>();\r\n  const [error, setError] = useState<AxiosError>();\r\n\r\n  const url = `${process.env.REACT_APP_API}/${path}`;\r\n\r\n  const wrap = (fn: Action<T>) => {\r\n    return async (record: T) => {\r\n      setProcesing(true);\r\n      setSuccess(undefined);\r\n      setError(undefined);\r\n      fn(record)\r\n        .then(() => {\r\n          setSuccess(true);\r\n          if (callback) {\r\n            callback();\r\n          }\r\n        })\r\n        .catch((error: Error) => {\r\n          setSuccess(false);\r\n          setError(error as AxiosError);\r\n        })\r\n        .finally(() => {\r\n          setProcesing(false);\r\n        });\r\n    };\r\n  };\r\n\r\n  const create: Action<T> = wrap(async (record: T) => {\r\n    await axios.post(url, record);\r\n  });\r\n\r\n  const update: Action<T> = wrap(async (record: T) => {\r\n    await axios.put(`${url}/${record.id}`, record);\r\n  });\r\n\r\n  const remove: Action<T> = wrap(async (record: T) => {\r\n    await axios.delete(`${url}/${record.id}`);\r\n  });\r\n\r\n  return {\r\n    create,\r\n    update,\r\n    remove,\r\n    processing,\r\n    success,\r\n    error,\r\n    setError,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}