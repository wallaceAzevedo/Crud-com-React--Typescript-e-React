{"ast":null,"code":"import axios from 'axios';\nexport const useMutation = (path, callback) => {\n  const wrap = fn => {\n    return async record => {\n      setProcessing(true);\n      setSuccess(undefined);\n      setError(undefined);\n      fn(record).then(() => {\n        setSuccess(true);\n\n        if (callback) {\n          callback();\n        }\n      }).catch(error => {\n        setSuccess(false);\n        setError(error);\n      }).finally(() => {\n        setProcessing(false);\n      });\n    };\n  };\n\n  const create = wrap(async record => {\n    await axios.post(url, record);\n  });\n  const update = wrap(async record => {\n    await axios.post(`${url}/${record.id}`, record);\n  });\n  const remove = wrap(async record => {\n    await axios.delete(`${url}/${record.id}`);\n  });\n  return {\n    create,\n    update,\n    remove,\n    processing,\n    success,\n    error,\n    setError\n  };\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/Crud-com-React--Typescript-e-React/src/hooks/useMutation.ts"],"names":["axios","useMutation","path","callback","wrap","fn","record","setProcessing","setSuccess","undefined","setError","then","catch","error","finally","create","post","url","update","id","remove","delete","processing","success"],"mappings":"AACA,OAAOA,KAAP,MAAgC,OAAhC;AAKA,OAAO,MAAMC,WAAW,GAAG,CACvBC,IADuB,EAEvBC,QAFuB,KAGnB;AAIJ,QAAMC,IAAI,GAAIC,EAAD,IAAmB;AAC5B,WAAO,MAAOC,MAAP,IAAoB;AACvBC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAC,MAAAA,UAAU,CAACC,SAAD,CAAV;AACAC,MAAAA,QAAQ,CAACD,SAAD,CAAR;AACAJ,MAAAA,EAAE,CAACC,MAAD,CAAF,CACKK,IADL,CACU,MAAM;AACRH,QAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,YAAIL,QAAJ,EAAc;AACVA,UAAAA,QAAQ;AACX;AACJ,OANL,EAOKS,KAPL,CAOYC,KAAD,IAAgB;AACnBL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAACG,KAAD,CAAR;AACH,OAVL,EAWKC,OAXL,CAWa,MAAM;AACXP,QAAAA,aAAa,CAAC,KAAD,CAAb;AACH,OAbL;AAcH,KAlBD;AAmBH,GApBD;;AAsBA,QAAMQ,MAAiB,GAAGX,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMN,KAAK,CAACgB,IAAN,CAAWC,GAAX,EAAeX,MAAf,CAAN;AACH,GAF6B,CAA9B;AAIA,QAAMY,MAAiB,GAAGd,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMN,KAAK,CAACgB,IAAN,CAAY,GAAEC,GAAI,IAAGX,MAAM,CAACa,EAAG,EAA/B,EAAkCb,MAAlC,CAAN;AACH,GAF6B,CAA9B;AAIA,QAAMc,MAAiB,GAAGhB,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMN,KAAK,CAACqB,MAAN,CAAc,GAAEJ,GAAI,IAAGX,MAAM,CAACa,EAAG,EAAjC,CAAN;AACH,GAF6B,CAA9B;AAIA,SAAO;AACHJ,IAAAA,MADG;AAEHG,IAAAA,MAFG;AAGHE,IAAAA,MAHG;AAIHE,IAAAA,UAJG;AAKHC,IAAAA,OALG;AAMHV,IAAAA,KANG;AAOHH,IAAAA;AAPG,GAAP;AAUH,CAnDM","sourcesContent":["import { useState } from 'react';\r\nimport axios, {AxiosError} from 'axios';\r\nimport { Record } from '../interfaces/RecordEntities';\r\n\r\nexport type Action<T> = (record:T)=> Promise<void>;\r\n\r\nexport const useMutation = <T extends Record>(\r\n    path: string,\r\n    callback?: Function\r\n    )=> {\r\n\r\n   \r\n\r\n    const wrap = (fn: Action<T>) => {\r\n        return async (record:T) => {\r\n            setProcessing(true)\r\n            setSuccess(undefined)\r\n            setError(undefined)\r\n            fn(record)\r\n                .then(() => {\r\n                    setSuccess(true);\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                })\r\n                .catch((error:Error)=> {\r\n                    setSuccess(false);\r\n                    setError(error as AxiosError);\r\n                })\r\n                .finally(() => {\r\n                    setProcessing(false)\r\n                });\r\n        };\r\n    };\r\n\r\n    const create: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(url,record);\r\n    });\r\n\r\n    const update: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(`${url}/${record.id}`, record);\r\n    });\r\n\r\n    const remove: Action<T> = wrap(async (record:T) => {\r\n        await axios.delete(`${url}/${record.id}`);\r\n    });\r\n\r\n    return {\r\n        create,\r\n        update,\r\n        remove,\r\n        processing,\r\n        success,\r\n        error,\r\n        setError,\r\n    };\r\n\r\n}"]},"metadata":{},"sourceType":"module"}