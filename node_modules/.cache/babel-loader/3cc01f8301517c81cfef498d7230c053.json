{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport axios from 'axios';\nexport const useMutation = (path, callback) => {\n  _s();\n\n  const [processing, setProcessing] = useState(false);\n  const [success, setSuccess] = useState();\n  const [error, setError] = useState();\n  const url = `${process.env.REACT_APP_API}/${path}`;\n\n  const wrap = fn => {\n    return async record => {\n      setProcessing(true);\n      setSuccess(undefined);\n      setError(undefined);\n      fn(record).then(() => {\n        setSuccess(true);\n\n        if (callback) {\n          callback();\n        }\n      }).catch(error => {\n        setSuccess(false);\n        setError(error);\n      }).finally(() => {\n        setProcessing(false);\n      });\n    };\n  };\n\n  const create = wrap(async record => {\n    await axios.post(url, record);\n  });\n  const update = wrap(async record => {\n    await axios.post(`${url}/${record.id}`, record);\n  });\n  const remove = wrap(async record => {\n    await axios.delete(`${url}/${record.id}`);\n  });\n  return {\n    create,\n    update,\n    remove,\n    processing,\n    success,\n    error,\n    setError\n  };\n};\n\n_s(useMutation, \"q6DfHj7Lun9zOyzmrCNjij4rphs=\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Crud-com-React--Typescript-e-React/src/hooks/useMutation.ts"],"names":["useState","axios","useMutation","path","callback","processing","setProcessing","success","setSuccess","error","setError","url","process","env","REACT_APP_API","wrap","fn","record","undefined","then","catch","finally","create","post","update","id","remove","delete"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAgC,OAAhC;AAKA,OAAO,MAAMC,WAAW,GAAG,CACvBC,IADuB,EAEvBC,QAFuB,KAGnB;AAAA;;AAEJ,QAAM,CAAEC,UAAF,EAAcC,aAAd,IAA+BN,QAAQ,CAAU,KAAV,CAA7C;AACA,QAAM,CAAEO,OAAF,EAAWC,UAAX,IAAyBR,QAAQ,EAAvC;AACA,QAAM,CAAES,KAAF,EAASC,QAAT,IAAqBV,QAAQ,EAAnC;AAEA,QAAMW,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,IAAGX,IAAK,EAAjD;;AAEA,QAAMY,IAAI,GAAIC,EAAD,IAAmB;AAC5B,WAAO,MAAOC,MAAP,IAAoB;AACvBX,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,UAAU,CAACU,SAAD,CAAV;AACAR,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACAF,MAAAA,EAAE,CAACC,MAAD,CAAF,CACKE,IADL,CACU,MAAM;AACRX,QAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,YAAIJ,QAAJ,EAAc;AACVA,UAAAA,QAAQ;AACX;AACJ,OANL,EAOKgB,KAPL,CAOYX,KAAD,IAAgB;AACnBD,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,QAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,OAVL,EAWKY,OAXL,CAWa,MAAM;AACXf,QAAAA,aAAa,CAAC,KAAD,CAAb;AACH,OAbL;AAcH,KAlBD;AAmBH,GApBD;;AAsBA,QAAMgB,MAAiB,GAAGP,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMhB,KAAK,CAACsB,IAAN,CAAWZ,GAAX,EAAeM,MAAf,CAAN;AACH,GAF6B,CAA9B;AAIA,QAAMO,MAAiB,GAAGT,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMhB,KAAK,CAACsB,IAAN,CAAY,GAAEZ,GAAI,IAAGM,MAAM,CAACQ,EAAG,EAA/B,EAAkCR,MAAlC,CAAN;AACH,GAF6B,CAA9B;AAIA,QAAMS,MAAiB,GAAGX,IAAI,CAAC,MAAOE,MAAP,IAAoB;AAC/C,UAAMhB,KAAK,CAAC0B,MAAN,CAAc,GAAEhB,GAAI,IAAGM,MAAM,CAACQ,EAAG,EAAjC,CAAN;AACH,GAF6B,CAA9B;AAIA,SAAO;AACHH,IAAAA,MADG;AAEHE,IAAAA,MAFG;AAGHE,IAAAA,MAHG;AAIHrB,IAAAA,UAJG;AAKHE,IAAAA,OALG;AAMHE,IAAAA,KANG;AAOHC,IAAAA;AAPG,GAAP;AAUH,CAvDM;;GAAMR,W","sourcesContent":["import { useState } from 'react';\r\nimport axios, {AxiosError} from 'axios';\r\nimport { Record } from '../interfaces/RecordEntities';\r\n\r\nexport type Action<T> = (record:T)=> Promise<void>;\r\n\r\nexport const useMutation = <T extends Record>(\r\n    path: string,\r\n    callback?: Function\r\n    )=> {\r\n\r\n    const [ processing, setProcessing] = useState<boolean>(false);\r\n    const [ success, setSuccess] = useState<boolean>();\r\n    const [ error, setError] = useState<AxiosError>();\r\n\r\n    const url = `${process.env.REACT_APP_API}/${path}`;\r\n\r\n    const wrap = (fn: Action<T>) => {\r\n        return async (record:T) => {\r\n            setProcessing(true)\r\n            setSuccess(undefined)\r\n            setError(undefined)\r\n            fn(record)\r\n                .then(() => {\r\n                    setSuccess(true);\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                })\r\n                .catch((error:Error)=> {\r\n                    setSuccess(false);\r\n                    setError(error as AxiosError);\r\n                })\r\n                .finally(() => {\r\n                    setProcessing(false)\r\n                });\r\n        };\r\n    };\r\n\r\n    const create: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(url,record);\r\n    });\r\n\r\n    const update: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(`${url}/${record.id}`, record);\r\n    });\r\n\r\n    const remove: Action<T> = wrap(async (record:T) => {\r\n        await axios.delete(`${url}/${record.id}`);\r\n    })\r\n\r\n    return {\r\n        create,\r\n        update,\r\n        remove,\r\n        processing,\r\n        success,\r\n        error,\r\n        setError,\r\n    };\r\n\r\n}"]},"metadata":{},"sourceType":"module"}