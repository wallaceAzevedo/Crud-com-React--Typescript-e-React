{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nexport const useFeth = (path, options) => {\n  _s();\n\n  const [records, setRecords] = useState([]);\n  const [version, setVersion] = useState(+new Date());\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n  const url = `${process.env.REACT_APP_API}/${path}`;\n  useEffect(() => {\n    const callFetcthFuction = async () => {\n      setLoading(true);\n\n      try {\n        const res = await axios.get(url, {\n          params: options\n        });\n        setRecords(res.data);\n      } catch (e) {\n        setError(e);\n      }\n\n      setLoading(false);\n    };\n\n    callFetcthFuction();\n  }, [url, options, version]);\n  return {\n    records,\n    setVersion,\n    loading,\n    error\n  };\n};\n\n_s(useFeth, \"8tibJipyKkuH7W5CAUji0zzbUYA=\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Crud-com-React--Typescript-e-React/src/hooks/useFetch.ts"],"names":["axios","useState","useEffect","useFeth","path","options","records","setRecords","version","setVersion","Date","loading","setLoading","error","setError","url","process","env","REACT_APP_API","callFetcthFuction","res","get","params","data","e"],"mappings":";;AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,OAAO,MAAMC,OAAO,GAAG,CAAmBC,IAAnB,EAAiCC,OAAjC,KAAkD;AAAA;;AACrE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAM,EAAN,CAAtC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAuBR,QAAQ,CAAC,CAAC,IAAIS,IAAJ,EAAF,CAArC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,EAAlC;AAEA,QAAMc,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,IAAGd,IAAK,EAAjD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,iBAAiB,GAAG,YAAY;AAClCP,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACA,cAAMQ,GAAG,GAAG,MAAOpB,KAAK,CAACqB,GAAN,CAAeN,GAAf,EAAoB;AAAEO,UAAAA,MAAM,EAAEjB;AAAV,SAApB,CAAnB;AACAE,QAAAA,UAAU,CAACa,GAAG,CAACG,IAAL,CAAV;AACH,OAHD,CAGE,OAAOC,CAAP,EAAS;AACPV,QAAAA,QAAQ,CAACU,CAAD,CAAR;AACH;;AACDZ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KATD;;AAUAO,IAAAA,iBAAiB;AACpB,GAZQ,EAYL,CAACJ,GAAD,EAAMV,OAAN,EAAeG,OAAf,CAZK,CAAT;AAaA,SAAO;AAAEF,IAAAA,OAAF;AAAWG,IAAAA,UAAX;AAAuBE,IAAAA,OAAvB;AAAgCE,IAAAA;AAAhC,GAAP;AACH,CAtBM;;GAAMV,O","sourcesContent":["import axios, { AxiosError } from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport {Record} from '../interfaces/RecordEntities';\r\n\r\nexport const useFeth = <T extends Record>(path: string, options?: {}) => {\r\n    const [records, setRecords] = useState<T[]>([]);\r\n    const [version, setVersion] =useState(+new Date());\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<AxiosError>();\r\n\r\n    const url = `${process.env.REACT_APP_API}/${path}`;\r\n\r\n    useEffect(() => {\r\n        const callFetcthFuction = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await  axios.get<T[]>(url, { params: options });\r\n                setRecords(res.data);\r\n            } catch (e){\r\n                setError(e as AxiosError);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        callFetcthFuction();\r\n    },  [url, options, version]);\r\n    return { records, setVersion, loading, error };\r\n};"]},"metadata":{},"sourceType":"module"}