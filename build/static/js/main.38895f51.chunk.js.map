{"version":3,"sources":["contexts/Page.tsx","components/Header.tsx","hooks/useFetch.ts","components/Status.tsx","components/RecordError.tsx","pages/Record/List.tsx","pages/Record/Form.tsx","hooks/useForm.ts","pages/Record/New.tsx","pages/Record/Edit.tsx","pages/Record/Mutations.tsx","hooks/useMutation.ts","pages/Record/index.tsx","pages/Article/ListItem.tsx","pages/Article/FormFields.tsx","pages/Article/index.tsx","pages/Author/ListItem.tsx","pages/Author/FormFields.tsx","pages/Author/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Page","Context","createContext","page","Articles","setPage","console","warn","usePage","useContext","PageStore","children","useState","Provider","value","Header","pageButton","pageName","className","onClick","Authors","href","target","rel","useFeth","path","options","records","setRecords","Date","version","setVersion","loading","setLoading","error","setError","url","process","useEffect","callFetcthFuction","a","axios","get","params","res","data","Status","text","RecordError","validationErrors","response","validation","message","config","map","errorkey","constraints","Object","values","contraint","constrainKey","RecordList","ListItem","emptyRecord","activeRecord","setActiveRecord","record","id","RecordForm","FormFields","submitAction","success","initialState","handleAction","formState","setFormState","handleChange","event","tagName","name","parsedValue","handleSubmit","preventDefault","useForm","onSubmit","type","RecordNew","create","RecordEdit","update","remove","RecordMutations","callback","processing","setProcessing","setSuccess","wrap","fn","undefined","then","catch","finally","post","delete","useMutation","apiPath","RecordIndex","apiOptions","ArticleListItem","title","author","ArticleFormFields","authorsFetch","onChange","rows","ArticleIndex","relations","AuthorListItem","AuthorFormFields","AuthorIndex","App","renderSwitch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38895f51.chunk.js","sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\n\r\nexport enum Page {\r\n    Articles = 'Articles',\r\n    Authors ='Authors',\r\n}\r\n\r\ntype ContextType = {\r\n    page: Page;\r\n    setPage: (page: Page) => void;\r\n}\r\n\r\nconst Context = createContext<ContextType>({\r\n    page: Page.Articles,\r\n    setPage:(page) => console.warn('no page provider'),\r\n});\r\n\r\nexport const usePage = ( ) =>useContext(Context);\r\n\r\nexport const PageStore: React.FC = ({ children }) => {\r\n    const [page, setPage] = useState(Page.Articles);\r\n    return (\r\n        <Context.Provider  value={{ page, setPage }}>{children}\r\n        </Context.Provider>\r\n    );\r\n};","import { Page, usePage} from '../contexts/Page';\r\n\r\nexport const Header: React.FC = () => {\r\n    const {page, setPage}= usePage();\r\n\r\n    const pageButton = (pageName: Page) => {\r\n        return (\r\n            <button \r\n            className={pageName === page ? 'active ': ''}\r\n            onClick={() => setPage(pageName)}\r\n            >\r\n                {pageName}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <header>\r\n            <h1>\r\n                <div className=\"title\">TypeScript CRUD</div>\r\n                <div className=\"subtitle\"> With React And TypeORM</div>\r\n            </h1>\r\n            <div className=\"navigation\">\r\n                <div className=\"internal\">\r\n                    {pageButton(Page.Articles)}\r\n                    {pageButton(Page.Authors)}\r\n                </div>\r\n                <div className=\"external\">\r\n                    <a href=\"https://github.com/wallaceAzevedo/Crud-com-React--Typescript-e-React\"\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                    className=\"button\"\r\n                    >\r\n                        GitHub\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\n","import axios, { AxiosError } from 'axios';\r\nimport { useState, useEffect } from 'react';\r\nimport {Record} from '../interfaces/RecordEntities';\r\n\r\nexport const useFeth = <T extends Record>(path: string, options?: {}) => {\r\n    const [records, setRecords] = useState<T[]>([]);\r\n    const [version, setVersion] =useState(+new Date());\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<AxiosError>();\r\n\r\n    const url = `${process.env.REACT_APP_API}/${path}`;\r\n\r\n    useEffect(() => {\r\n        const callFetcthFuction = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await  axios.get<T[]>(url, { params: options });\r\n                setRecords(res.data);\r\n            } catch (e){\r\n                setError(e as AxiosError);\r\n            }\r\n            setLoading(false);\r\n        };\r\n        callFetcthFuction();\r\n    },  [url, options, version]);\r\n    return { records, setVersion, loading, error };\r\n};","interface IProps {\r\n    text:string;\r\n}\r\n\r\nexport const Status: React.FC<IProps> = ({ text }) => {\r\n    return(\r\n        <div className=\"status\">\r\n            <span className=\"status-text\">{text}</span>\r\n        </div>\r\n    )\r\n}","import { AxiosError } from 'axios';\r\nimport { ValidationError } from 'class-validator';\r\n\r\ninterface IProps {\r\n  error: AxiosError;\r\n}\r\n\r\nexport const RecordError: React.FC<IProps> =({ error }) =>{\r\n    const validationErrors = error?.response?.data\r\n    ?.validation as ValidationError[];\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            <div>\r\n                <b>Message:</b>{error.message}\r\n            </div>\r\n            <div>\r\n                <b>URL:</b>{error.config.url}\r\n            </div>\r\n            {error.response?.data.message && (\r\n                <div>\r\n                    <b>Details</b>{error.response?.data.message}\r\n                </div>\r\n            )}\r\n            {validationErrors && \r\n            validationErrors.map((error, errorkey) => (\r\n                <ul key={errorkey}>\r\n                    {error.constraints &&\r\n                    Object.values(\r\n                        error.constraints\r\n                    ).map((contraint, constrainKey)=>(\r\n                        <li key={constrainKey}>{contraint}</li>\r\n                    ))}\r\n                </ul>\r\n            ))\r\n            }\r\n        </div>\r\n    )\r\n}","import { Record} from '../../interfaces/RecordEntities';\r\nimport {RecordListProps } from '../../interfaces/PagesProps';\r\nimport { usePage } from '../../contexts/Page';\r\nimport { Status } from '../../components/Status';\r\nimport { RecordError } from '../../components/RecordError';\r\n\r\nexport const RecordList = <T extends Record >({\r\n    ListItem,\r\n    records,\r\n    emptyRecord,\r\n    activeRecord,\r\n    setActiveRecord,\r\n    loading,\r\n    error,\r\n}: RecordListProps <T> ) => {\r\n    const {page} = usePage();\r\n\r\n    return (\r\n        <div className=\"list\">\r\n      {error && <RecordError error={error} />}\r\n      <div>\r\n        <h2>{page}</h2>\r\n        <button className=\"bt-new\" onClick={() => setActiveRecord(emptyRecord)}>\r\n          New\r\n        </button>\r\n        <ul>\r\n          {records.map((record) => (\r\n            <li\r\n              key={record.id}\r\n              className={record.id === activeRecord?.id ? 'active' : ''}\r\n              onClick={() => setActiveRecord(record)}\r\n            >\r\n              <ListItem record={record} />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      {loading && <Status text=\"Loading...\" />}\r\n    </div>\r\n  );\r\n};","import { useEffect } from 'react';\r\nimport { Record } from '../../interfaces/RecordEntities';\r\nimport {RecordFormProps} from '../../interfaces/PagesProps';\r\nimport { useForm } from '../../hooks/useForm';\r\n\r\nexport const RecordForm = <T extends Record>({\r\n    FormFields,\r\n    activeRecord,\r\n    submitAction,\r\n    success,\r\n}:RecordFormProps<T>) =>{\r\n    const { formState, setFormState, handleChange, handleSubmit } = useForm<T>(\r\n        activeRecord,\r\n        submitAction\r\n        );\r\n\r\n    useEffect(() =>{\r\n        if(activeRecord.id || success){\r\n            setFormState(activeRecord);\r\n        }\r\n    },[setFormState, activeRecord, success]);\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <FormFields formState={formState} handleChange={handleChange}/>\r\n                <input type=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    );\r\n};","import React, {useState} from \"react\";\r\nimport { Action } from \"./useMutation\";\r\n\r\nexport type IChangeElement =\r\n| HTMLInputElement\r\n| HTMLSelectElement\r\n| HTMLTextAreaElement;\r\n\r\nexport const useForm = <T>(initialState: T, handleAction: Action<T>) => {\r\n    const [formState , setFormState] = useState<T>(initialState);\r\n\r\n    const handleChange = (event: React.ChangeEvent<IChangeElement>): void => {\r\n        const { tagName , name, value } = event.target;\r\n        const parsedValue = tagName === 'SELECT' && value === '' ? null : value;\r\n        setFormState({...formState, [name]: parsedValue});\r\n    };\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\r\n        event.preventDefault();\r\n        handleAction(formState);\r\n    }\r\n\r\n    return { formState, setFormState, handleChange, handleSubmit }\r\n};","import { Record } from \"../../interfaces/RecordEntities\";\r\nimport { RecordNewProps } from \"../../interfaces/PagesProps\";\r\nimport { RecordForm } from './Form';\r\n\r\nexport const RecordNew = <T extends Record>({\r\n    FormFields,\r\n    activeRecord,\r\n    create,\r\n    success,\r\n}:RecordNewProps<T>) => {\r\n    return (\r\n        <div className=\"new\">\r\n            <h2>New</h2>\r\n            <RecordForm \r\n            FormFields={FormFields} \r\n            activeRecord={activeRecord}\r\n            submitAction={create}\r\n            success={success}\r\n            />\r\n        </div>\r\n    );\r\n};","import {Record} from '../../interfaces/RecordEntities';\r\nimport { RecordEditProps } from '../../interfaces/PagesProps';\r\nimport { RecordForm } from './Form';\r\n\r\nexport const RecordEdit = <T extends Record>({\r\n    FormFields,\r\n    activeRecord,\r\n    update,\r\n    remove,\r\n    success,\r\n}:RecordEditProps<T>) => {\r\n    return (\r\n        <div className=\"edit\">\r\n            <button className=\"bt-remove\" onClick={() => remove(activeRecord)}>\r\n                Remove\r\n            </button>\r\n            <h2>Edit</h2>\r\n            <RecordForm \r\n            FormFields={FormFields} \r\n            activeRecord={activeRecord}\r\n            submitAction={update}\r\n            success={success}\r\n            />\r\n        </div>\r\n    )\r\n}","import { useEffect } from 'react';\r\nimport { Record } from '../../interfaces/RecordEntities';\r\nimport { RecordMutationsProps } from '../../interfaces/PagesProps';\r\nimport { RecordNew } from './New';\r\nimport { RecordEdit } from './Edit';\r\nimport { useMutation } from '../../hooks/useMutation';\r\nimport { Status } from '../../components/Status';\r\nimport { RecordError } from '../../components/RecordError';\r\n\r\nexport const RecordMutations = <T extends Record>({\r\n    FormFields,\r\n    activeRecord,\r\n    apiPath,\r\n    callback,\r\n}: RecordMutationsProps<T>) => {\r\n  const { \r\n    create, \r\n    update, \r\n    remove,\r\n    processing,\r\n    success,\r\n    error,\r\n    setError\r\n  } = useMutation<T>(apiPath, callback);\r\n\r\n  useEffect(() => {\r\n    if (activeRecord.id) {\r\n      setError(undefined);\r\n    }\r\n  }, [activeRecord, setError]);\r\n\r\n  return (\r\n    <div className=\"mutations\">\r\n      {error &&<RecordError error={error}/>}\r\n      {activeRecord.id ? (\r\n        <RecordEdit<T> \r\n        FormFields={FormFields} \r\n        activeRecord={activeRecord}\r\n        update={update}\r\n        remove={remove}\r\n        success={success}\r\n        />\r\n      ) : (\r\n        <RecordNew<T> \r\n        FormFields={FormFields} \r\n        activeRecord={activeRecord}\r\n        create={create}\r\n        success={success}\r\n        />\r\n      )}\r\n      {processing && <Status text=\"processing...\"/>}\r\n    </div>\r\n  );\r\n};","import { useState } from 'react';\r\nimport axios, {AxiosError} from 'axios';\r\nimport { Record } from '../interfaces/RecordEntities';\r\n\r\nexport type Action<T> = (record:T)=> Promise<void>;\r\n\r\nexport const useMutation = <T extends Record>(\r\n    path: string,\r\n    callback?: Function\r\n    )=> {\r\n\r\n    const [ processing, setProcessing] = useState<boolean>(false);\r\n    const [ success, setSuccess] = useState<boolean>();\r\n    const [ error, setError] = useState<AxiosError>();\r\n\r\n    const url = `${process.env.REACT_APP_API}/${path}`;\r\n\r\n    const wrap = (fn: Action<T>) => {\r\n        return async (record:T) => {\r\n            setProcessing(true)\r\n            setSuccess(undefined)\r\n            setError(undefined)\r\n            fn(record)\r\n                .then(() => {\r\n                    setSuccess(true);\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                })\r\n                .catch((error:Error)=> {\r\n                    setSuccess(false);\r\n                    setError(error as AxiosError);\r\n                })\r\n                .finally(() => {\r\n                    setProcessing(false)\r\n                });\r\n        };\r\n    };\r\n\r\n    const create: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(url,record);\r\n    });\r\n\r\n    const update: Action<T> = wrap(async (record:T) => {\r\n        await axios.post(`${url}/${record.id}`, record);\r\n    })\r\n\r\n    const remove: Action<T> = wrap(async (record:T) => {\r\n        await axios.delete(`${url}/${record.id}`);\r\n    })\r\n\r\n    return {\r\n        create,\r\n        update,\r\n        remove,\r\n        processing,\r\n        success,\r\n        error,\r\n        setError,\r\n    };\r\n\r\n}","import {useState} from 'react';\r\nimport { Record } from \"../../interfaces/RecordEntities\";\r\nimport { RecordIndexProps } from \"../../interfaces/PagesProps\";\r\nimport { useFeth } from \"../../hooks/useFetch\";\r\nimport { RecordList} from './List';\r\nimport {RecordMutations} from './Mutations'\r\n\r\nexport const RecordIndex = <T extends Record>({\r\n    ListItem,\r\n    apiPath,\r\n    apiOptions,\r\n    FormFields,\r\n    emptyRecord,\r\n}: RecordIndexProps<T> ) =>{\r\n    const [activeRecord, setActiveRecord] = useState<T>(emptyRecord);\r\n    const { records, setVersion, loading, error } = useFeth<T>(apiPath, apiOptions);\r\n\r\n    const callback = () =>{\r\n        setVersion(+new Date());\r\n        setActiveRecord(emptyRecord);\r\n    }\r\n    return (\r\n        <div className=\"page\" >\r\n            <div className=\"content\">\r\n                <RecordList<T> \r\n                ListItem={ListItem} \r\n                records={records}\r\n                emptyRecord={emptyRecord}\r\n                activeRecord={activeRecord}\r\n                setActiveRecord={setActiveRecord}\r\n                loading={loading}\r\n                error={error}\r\n                />\r\n                <RecordMutations<T>\r\n                   FormFields={FormFields}\r\n                   activeRecord={activeRecord}\r\n                   apiPath={apiPath}\r\n                   callback={callback}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};","import { Article } from '../../interfaces/RecordEntities';\r\nimport { ListItemProps } from '../../interfaces/PagesProps';\r\n\r\ntype IProps = ListItemProps<Article>;\r\n\r\nexport const ArticleListItem: React.FC<IProps> = ({ record }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"title\">{record.title}</div>\r\n      <div className=\"author\">By {record.author?.name || 'Desconhecido'}</div>\r\n    </div>\r\n  );\r\n};","import { useFeth } from '../../hooks/useFetch';\r\nimport { FormFieldsProps } from '../../interfaces/PagesProps';\r\nimport { Article, Author } from '../../interfaces/RecordEntities';\r\n\r\ntype IProps = FormFieldsProps<Article>;\r\n\r\nexport const ArticleFormFields: React.FC<IProps> = ({\r\n  formState,\r\n  handleChange,\r\n}) => {\r\n  const authorsFetch = useFeth<Author>('authors');\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label>Title</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"title\"\r\n          value={formState.title}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Text</label>\r\n        <textarea\r\n          name=\"text\"\r\n          value={formState.text}\r\n          onChange={handleChange}\r\n          rows={5}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label>Author</label>\r\n        <select\r\n          name=\"author\"\r\n          value={formState.author ? formState.author.id : ''}\r\n          onChange={handleChange}\r\n        >\r\n          <option value=\"\">Select</option>\r\n          {authorsFetch.records.map((author) => (\r\n            <option key={author.id} value={author.id}>\r\n              {author.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n          </div>\r\n    </div>\r\n  );\r\n};","import { Article } from '../../interfaces/RecordEntities';\r\nimport { RecordIndex } from '../Record';\r\nimport { ArticleListItem } from './ListItem';\r\nimport { ArticleFormFields } from './FormFields';\r\n\r\nexport const ArticleIndex: React.FC = () => {\r\n  const apiOptions = { relations: ['author'] };\r\n\r\n  const emptyRecord = {\r\n    title:'',\r\n    text:'',\r\n  };\r\n\r\n    return (\r\n        <RecordIndex<Article>\r\n        ListItem={ArticleListItem}\r\n        apiPath=\"articles\"\r\n        apiOptions={apiOptions}\r\n        FormFields={ArticleFormFields}\r\n        emptyRecord={emptyRecord}\r\n      />\r\n    );\r\n};","import { Author } from '../../interfaces/RecordEntities';\r\nimport { ListItemProps } from '../../interfaces/PagesProps';\r\n\r\ntype IProps = ListItemProps<Author>;\r\n\r\nexport const AuthorListItem: React.FC<IProps> = ({ record }) => {\r\n  return <div className=\"title\">{record.name}</div>;\r\n};","import { Author } from '../../interfaces/RecordEntities';\r\nimport { FormFieldsProps } from '../../interfaces/PagesProps';\r\n\r\ntype IProps = FormFieldsProps<Author>;\r\n\r\nexport const AuthorFormFields: React.FC<IProps> = ({\r\n  formState,\r\n  handleChange,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={formState.name}\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};","import { Author } from '../../interfaces/RecordEntities';\r\nimport { RecordIndex } from '../Record';\r\nimport { AuthorListItem } from './ListItem';\r\nimport { AuthorFormFields } from './FormFields';\r\n\r\nexport const AuthorIndex: React.FC = () => {\r\n  const apiOptions = {};\r\n\r\n  const emptyRecord = {\r\n    name: '',\r\n  };\r\n\r\n  return (\r\n    <RecordIndex<Author>\r\n      ListItem={AuthorListItem}\r\n      apiPath=\"authors\"\r\n      apiOptions={apiOptions}\r\n      FormFields={AuthorFormFields}\r\n      emptyRecord={emptyRecord}\r\n    />\r\n  );\r\n};","import { Header } from './components/Header';\r\nimport { Page, usePage} from './contexts/Page';\r\nimport { ArticleIndex } from './pages/Article';\r\nimport { AuthorIndex } from './pages/Author';\r\n\r\nconst App: React.FC = () => {\r\n  const {page} = usePage();\r\n\r\n  const renderSwitch = () => {\r\n    switch (page) {\r\n      case Page.Articles:\r\n        return <ArticleIndex />;\r\n      case Page.Authors:\r\n        return <AuthorIndex />;\r\n        default:\r\n          return'';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header/>\r\n      {renderSwitch()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {PageStore} from './contexts/Page'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PageStore>\r\n      <App />\r\n    </PageStore>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}